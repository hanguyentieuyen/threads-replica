openapi: 3.0.3
info:
  title: Swagger - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Threads replica users APIs 
  - name: posts
    description: Treads replica posts API
  - name: bookmark
    description: Threads replica bookmarks APIs
  - name: like
    description: Threads replica like APIs
  - name: media
    description: Threads replica media API
  - name: hashtags
    description: Threads replica hashtags API

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register
      description: 'Register Threads Replica'
      operationId: register
      requestBody: 
        description: Registration Information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register successfully
                  data:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid input
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: 'Login to Threads Replica'
      operationId: login
      requestBody: 
        description: Login Information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        default:
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  data:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid or missing input fields
  /users/logout:
    post:
      tags:
        - users
      summary: Logout a user
      description: Logs out a user by invalidating the provided refresh token.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        '400':
          description: Invalid or missing refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid refresh token
        '401':
          description: Unauthorized - Token is invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token has expired or is invalid
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refresh the access token
      description: Generates a new access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: A valid refresh token to generate a new access token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjcxM2U3NDg4MGEzN2M1NjM3OGM5MGViIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MzUwNTQ0ODEsImV4cCI6MTczNTkxODQ4MX0.usOs9alkFl3f4A8JHFMy0H561Zj8IClAo9iULfoQh5g
      responses:
        '200':
          description: Successfully generated a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  data:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid refresh token
        '401':
          description: Unauthorized - Refresh token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized - Token expired or invalid
  /users/me:
    get:
      tags:
        - users
      summary: Get my profile
      description: Get my profile
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Get user profile successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile success
                  data:
                    $ref: '#/components/schemas/User'  
    patch:
      tags:
        - users
      summary: Update user profile
      description: Allows a user to update their profile information such as name, date of birth, bio, location, etc.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileBody'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Change my profile success
                  data:
                    $ref: '#/components/schemas/User'  
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input data
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not authenticated
  /users/{username}:
    get:
      tags:
        - users
      summary: Get user details
      description: Retrieves information about a specific user by their user ID.
      parameters:
        - name: username
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            example: user672f90bbef2ea13586c40673
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
               schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get user profile success
                  data:
                    $ref: '#/components/schemas/User'  
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid user ID format
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Forgot password
      description: 'Forgot password'
      operationId: forgotPassword
      requestBody: 
        description: Forgot password information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordBody'
      responses:
        default:
          description: Forgot password Information
          content:
            application/json:
              schema:
                type: object
                properties:
                   message:
                    type: string
                    example: Check email to reset password
        '422':
          description: Invalid or missing input fields
  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset user password
      description: Allows a user to reset their password using a valid forgot password token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordBody'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Passwords do not match or token is invalid
        '401':
          description: Unauthorized - Token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token has expired or is invalid
  /users/change-password:
    post:
      tags:
        - users
      summary: Change user password
      description: Allows a user to change their password by providing the old password and a new one.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: New passwords do not match or old password is incorrect
  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify email address
      description: Verifies a user's email using a provided token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verify_email_token:
                  type: string
                  description: The token used to verify the user's email.
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZiYTVkYTU1MWUwYzM0NGQxZmMwMjY5IiwidmVyaWZ5IjowLCJ0b2tlbl90eXBlIjoyLCJpYXQiOjE3MzUwNTQ3OTIsImV4cCI6MTczNTY1OTU5Mn0.uyG13czqCyeZ24ghcLVzsaz73vmbAXaVHYrkN-Y-Gv8"
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully."
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired verification token."
  /users/verify-forgot-password:
    post:
      tags:
        - users
      summary: Verify forgot password token
      description: Verifies the token for resetting the password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  description: The token used to verify the forgot password request.
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZiYTVkYTU1MWUwYzM0NGQxZmMwMjY5IiwidmVyaWZ5IjowLCJ0b2tlbl90eXBlIjoyLCJpYXQiOjE3Mjg0OTI4MjUsImV4cCI6MTcyOTA5NzYyNX0.d75eIKO69vqjoO1aWPLXGqiWyIGzMruLGZbtKN_dozE"
      responses:
        '200':
          description: Forgot password token verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forgot password token verified successfully."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid signatured or JWT expired."
  /users/follow:
    post:
      tags:
        - users
      summary: Follow a user
      description: Allows a user to follow another user by specifying the `followed_user_id` in the request body.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followed_user_id:
                  type: string
                  description: ID of the user to follow
                  example: 66ba5da551e0c344d1fc0269
      responses:
        '200':
          description: Successfully followed the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully followed the user
        '422':
          description: Invalid or missing input fields
  /users/follow/{followed_user_id}:
    delete:
      tags:
        - users
      summary: Unfollow a user
      description: Unfollows the user specified by the `followed_user_id`.
      security:
        - BearerAuth: []
      parameters:
        - name: followed_user_id
          in: path
          required: true
          description: ID of the user to unfollow
          schema:
            type: string
            example: 66ba5da551e0c344d1fc0269
      responses:
        '200':
          description: Successfully unfollowed the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully unfollowed the user
        '422':
          description: Invalid or missing input fields
  /users/{user_id}/following/:
    get:
      tags:
        - users
      summary: Get list of users that the specified user is following
      description: Retrieve a paginated list of users that a specific user is following.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user whose following list is being retrieved.
          schema:
            type: string
            example: "6713e74880a37c56378c90eb"
        - name: page
          in: query
          required: true
          description: The page number to retrieve.
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: true
          description: The number of records per page.
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Successfully retrieved the user's following list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get user following successfully"
                  data:
                    $ref: '#/components/schemas/UserFollowing'
        '422':
          description: Invalid request (e.g., missing parameters or invalid user ID).
  /users/{user_id}/followers/:
    get:
      tags:
        - users
      summary: Get list of users that the specified user is followed
      description: Retrieve a paginated list of users that a specific user is followed.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user whose followed list is being retrieved.
          schema:
            type: string
            example: "6713e74880a37c56378c90eb"
        - name: page
          in: query
          required: true
          description: The page number to retrieve.
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: true
          description: The number of records per page.
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Successfully retrieved the user's followed list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get user followers successfully"
                  data:
                    $ref: '#/components/schemas/UserFollowers'
        '422':
          description: Invalid request (e.g., missing parameters or invalid user ID).
  /users/{user_id}/bookmarks:
    get:
      tags:
        - users
      summary: Get bookmarks by user
      description: Retrieve all bookmarks of a specific user with pagination.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user whose bookmarks are being retrieved.
          schema:
            type: string
            example: "6713e74880a37c56378c90eb"
        - name: page
          in: query
          required: false
          description: The page number for pagination.
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          description: The number of records per page.
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successfully retrieved user bookmarks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: Current page number.
                      limit:
                        type: integer
                        description: Number of records per page.
                      total_page:
                        type: integer
                        description: Total number of pages.
                      user_bookmark_posts:
                        $ref: '#/components/schemas/Post'
        '422':
          description: Invalid request parameters.
        
  /bookmark:
    post:
      tags:
        - bookmark
      summary: Bookmark a post
      description: Bookmark a post
      operationId: bookmarkPost
      security:
        - BearerAuth: []
      requestBody: 
        description: Bookmark information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkBody'
      responses:
        default:
          description: Bookmark post successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bookmark success"
                  data:
                    $ref: '#/components/schemas/Bookmark'
        '422':
          description: Invalid or missing input fields
  /bookmark/post/{id}:
    delete:
      tags:
        - bookmark
      summary: Delete a bookmark by ID
      description: Deletes a specific bookmark based on the provided ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the bookmark to delete.
          schema:
            type: string
            example: 66d6059974ecbef1214d20ab
      responses:
        '200':
          description: Successfully deleted the bookmark.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unbookmark successfully"
                  data:
                    $ref: '#/components/schemas/Bookmark'
        '422':
          description: Invalid or missing input fields
  /like:
    post:
      tags:
        - like
      summary: Like a post
      description: Like a post
      operationId: likePost
      security:
        - BearerAuth: []
      requestBody: 
        description: Like information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeBody'
      responses:
        default:
          description: Like post successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Like successfully"
                  data:
                    $ref: '#/components/schemas/Like'
        '422':
          description: Invalid or missing input fields
  /like/post/{id}:
    delete:
      tags:
        - like
      summary: Remove a like from a post
      description: Deletes the like associated with the specified post ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to remove the like from
          schema:
            type: string
            example: 66d6059974ecbef1214d20ab
      responses:
        '200':
          description: Like successfully removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unlike successfully"
                  data:
                    $ref: '#/components/schemas/Like'
        '422':
          description: Invalid or missing input fields
  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get a specific post by ID
      description: Retrieve detailed information about a specific post using its unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the post
          schema:
            type: string
            example: 66d606b192c854d70c7704ce
      responses:
        '200':
          description: Successfully retrieved the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get post detail successfully"
                  data:
                    $ref: '#/components/schemas/Post'
                
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Post not found
  /posts:
    post:
      tags:
        - posts
      summary: Create a new post
      description: Creates a new post with the provided details.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/PostBody'
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post created successfully"
                  data:
                    $ref: '#/components/schemas/Post'
        '422':
          description: Invalid or missing input fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
    get:
      tags:
        - posts
      summary: Get paginated posts
      description: Retrieves a paginated list of posts.
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: The number of posts per page.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Paginated posts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get paginated posts successfully"
                  data:
                    $ref: '#/components/schemas/Post'
        '422':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid page or limit parameters."
  
  /medias/upload-image:
    post:
      tags:
        - media
      summary: Upload an image
      description: Uploads an image file to the server.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Image uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upload success"
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "https://threads-replica.s3.ap-southeast-1.amazonaws.com/images/3dd96552ba27d176ea5961500.jpg"
                      type:
                        type: string
                        example: "image"
        '500':
          description: Invalid file upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File is empty."
                  errorInfo:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "File is empty."
  /medias/upload-video:
    post:
      tags:
        - media
      summary: Upload a video
      description: Uploads a video file to the server.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
                  description: The video file to upload.
      responses:
        '200':
          description: Video uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upload success"
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "https://threads-replica.s3.ap-southeast-1.amazonaws.com/images/3dd96552ba27d176ea5961500.mp4"
                      type:
                        type: string
                        example: "video"
        '500':
          description: Invalid file upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File is empty."
                  errorInfo:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "File is empty."
  
  /hashtags:
    post:
      tags:
        - hashtags
      summary: Create new hashtag
      description: Create a new hashtag used in the posts.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HashtagBody'
      responses:
        '200':
          description: Hashtags retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hashtag'
        '422':
          description: Invalid or missing input fields
    get:
      tags:
        - hashtags
      summary: Search hashtags
      description: Returns a list of hashtags containing the search keyword.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
          example: "js"
          description: Hashtags search keywords.
      responses:
        "200":
          description: List of hashtags found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get hashtags successfully"
                  data:
                    type: array
                    items:
                      type: string
                    example: ["js", "ReactJS", "nodejs"]
        "422":
          description: Invalid fields